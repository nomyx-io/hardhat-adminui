{
  "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "CounterDecremented",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "CounterIncremented",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousValue",
          "type": "uint256"
        }
      ],
      "name": "CounterReset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UserCounterUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "decrement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCounterMetadata",
      "outputs": [
        {
          "internalType": "address",
          "name": "lastUpdater",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdateTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "increment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "incrementUserCounter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resetCounter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setUserCounter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setUserCounterAsOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2b9fafbc3f92373d204fb985c73610c427d50e5513e23a77a194523c0861bd57",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
    "transactionIndex": 0,
    "gasUsed": "432766",
    "logsBloom": "0x
    "blockHash": "0x211d27bf254fc91d67199a7680c0940a02b42fba3610dbc5826a79f2d986735d",
    "transactionHash": "0x2b9fafbc3f92373d204fb985c73610c427d50e5513e23a77a194523c0861bd57",
    "logs": [],
    "blockNumber": 6,
    "cumulativeGasUsed": "432766",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b953995d4bdc99a8a1a5a5bbfbdc36f1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"CounterDecremented\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"CounterIncremented\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousValue\",\"type\":\"uint256\"}],\"name\":\"CounterReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UserCounterUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"decrement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCounterMetadata\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lastUpdater\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incrementUserCounter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetCounter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setUserCounter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setUserCounterAsOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A sample facet that demonstrates basic diamond functionality with a simple counter      This facet provides increment, decrement, and view operations for a counter value      stored in diamond storage. It serves as an example of how to implement business      logic in a diamond facet while using the diamond storage pattern.\",\"kind\":\"dev\",\"methods\":{\"decrement()\":{\"details\":\"Decreases the global counter and updates metadata      Reverts if counter would go below zero\"},\"getCounter()\":{\"returns\":{\"_0\":\"The current counter value\"}},\"getCounterMetadata()\":{\"returns\":{\"lastUpdateTimestamp\":\"Timestamp of the last update\",\"lastUpdater\":\"Address of the last user to update the counter\"}},\"getUserCounter(address)\":{\"params\":{\"user\":\"The address of the user\"},\"returns\":{\"_0\":\"The user's counter value\"}},\"increment()\":{\"details\":\"Increases the global counter and updates metadata\"},\"incrementUserCounter()\":{\"details\":\"Each user has their own counter independent of the global one\"},\"resetCounter()\":{\"details\":\"Only the diamond owner can reset the counter\"},\"setUserCounter(uint256)\":{\"details\":\"Only the user themselves or the diamond owner can set their counter\",\"params\":{\"value\":\"The new counter value\"}},\"setUserCounterAsOwner(address,uint256)\":{\"details\":\"Only the diamond owner can set other users' counters\",\"params\":{\"user\":\"The user whose counter to set\",\"value\":\"The new counter value\"}}},\"title\":\"CounterFacet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"decrement()\":{\"notice\":\"Decrement the global counter by 1\"},\"getCounter()\":{\"notice\":\"Get the current global counter value\"},\"getCounterMetadata()\":{\"notice\":\"Get metadata about the last counter update\"},\"getUserCounter(address)\":{\"notice\":\"Get a user's personal counter value\"},\"increment()\":{\"notice\":\"Increment the global counter by 1\"},\"incrementUserCounter()\":{\"notice\":\"Increment a user's personal counter\"},\"resetCounter()\":{\"notice\":\"Reset the global counter to zero\"},\"setUserCounter(uint256)\":{\"notice\":\"Set a user's counter to a specific value\"},\"setUserCounterAsOwner(address,uint256)\":{\"notice\":\"Set any user's counter (owner only)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/CounterFacet.sol\":\"CounterFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/facets/CounterFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { LibDiamond } from \\\"../libraries/LibDiamond.sol\\\";\\n\\n/**\\n * @title CounterFacet\\n * @dev A sample facet that demonstrates basic diamond functionality with a simple counter\\n *      This facet provides increment, decrement, and view operations for a counter value\\n *      stored in diamond storage. It serves as an example of how to implement business\\n *      logic in a diamond facet while using the diamond storage pattern.\\n */\\ncontract CounterFacet {\\n    // Custom storage struct for this facet\\n    struct CounterStorage {\\n        uint256 counter;\\n        address lastUpdater;\\n        uint256 lastUpdateTimestamp;\\n        mapping(address => uint256) userCounters;\\n    }\\n\\n    // Storage position for this facet\\n    bytes32 constant COUNTER_STORAGE_POSITION = keccak256(\\\"counter.facet.storage\\\");\\n\\n    // Events\\n    event CounterIncremented(address indexed user, uint256 newValue);\\n    event CounterDecremented(address indexed user, uint256 newValue);\\n    event CounterReset(address indexed user, uint256 previousValue);\\n    event UserCounterUpdated(address indexed user, uint256 newValue);\\n\\n    /**\\n     * @notice Get the counter storage\\n     * @dev Internal function to access the counter's diamond storage slot\\n     * @return cs The counter storage struct\\n     */\\n    function counterStorage() internal pure returns (CounterStorage storage cs) {\\n        bytes32 position = COUNTER_STORAGE_POSITION;\\n        assembly {\\n            cs.slot := position\\n        }\\n    }\\n\\n    /**\\n     * @notice Increment the global counter by 1\\n     * @dev Increases the global counter and updates metadata\\n     */\\n    function increment() external {\\n        CounterStorage storage cs = counterStorage();\\n        cs.counter += 1;\\n        cs.lastUpdater = msg.sender;\\n        cs.lastUpdateTimestamp = block.timestamp;\\n        \\n        emit CounterIncremented(msg.sender, cs.counter);\\n    }\\n\\n    /**\\n     * @notice Decrement the global counter by 1\\n     * @dev Decreases the global counter and updates metadata\\n     *      Reverts if counter would go below zero\\n     */\\n    function decrement() external {\\n        CounterStorage storage cs = counterStorage();\\n        require(cs.counter > 0, \\\"CounterFacet: Counter cannot go below zero\\\");\\n        \\n        cs.counter -= 1;\\n        cs.lastUpdater = msg.sender;\\n        cs.lastUpdateTimestamp = block.timestamp;\\n        \\n        emit CounterDecremented(msg.sender, cs.counter);\\n    }\\n\\n    /**\\n     * @notice Reset the global counter to zero\\n     * @dev Only the diamond owner can reset the counter\\n     */\\n    function resetCounter() external {\\n        LibDiamond.enforceIsContractOwner();\\n        CounterStorage storage cs = counterStorage();\\n        \\n        uint256 previousValue = cs.counter;\\n        cs.counter = 0;\\n        cs.lastUpdater = msg.sender;\\n        cs.lastUpdateTimestamp = block.timestamp;\\n        \\n        emit CounterReset(msg.sender, previousValue);\\n    }\\n\\n    /**\\n     * @notice Get the current global counter value\\n     * @return The current counter value\\n     */\\n    function getCounter() external view returns (uint256) {\\n        return counterStorage().counter;\\n    }\\n\\n    /**\\n     * @notice Get metadata about the last counter update\\n     * @return lastUpdater Address of the last user to update the counter\\n     * @return lastUpdateTimestamp Timestamp of the last update\\n     */\\n    function getCounterMetadata() external view returns (address lastUpdater, uint256 lastUpdateTimestamp) {\\n        CounterStorage storage cs = counterStorage();\\n        return (cs.lastUpdater, cs.lastUpdateTimestamp);\\n    }\\n\\n    /**\\n     * @notice Increment a user's personal counter\\n     * @dev Each user has their own counter independent of the global one\\n     */\\n    function incrementUserCounter() external {\\n        CounterStorage storage cs = counterStorage();\\n        cs.userCounters[msg.sender] += 1;\\n        \\n        emit UserCounterUpdated(msg.sender, cs.userCounters[msg.sender]);\\n    }\\n\\n    /**\\n     * @notice Get a user's personal counter value\\n     * @param user The address of the user\\n     * @return The user's counter value\\n     */\\n    function getUserCounter(address user) external view returns (uint256) {\\n        return counterStorage().userCounters[user];\\n    }\\n\\n    /**\\n     * @notice Set a user's counter to a specific value\\n     * @dev Only the user themselves or the diamond owner can set their counter\\n     * @param value The new counter value\\n     */\\n    function setUserCounter(uint256 value) external {\\n        CounterStorage storage cs = counterStorage();\\n        cs.userCounters[msg.sender] = value;\\n        \\n        emit UserCounterUpdated(msg.sender, value);\\n    }\\n\\n    /**\\n     * @notice Set any user's counter (owner only)\\n     * @dev Only the diamond owner can set other users' counters\\n     * @param user The user whose counter to set\\n     * @param value The new counter value\\n     */\\n    function setUserCounterAsOwner(address user, uint256 value) external {\\n        LibDiamond.enforceIsContractOwner();\\n        CounterStorage storage cs = counterStorage();\\n        cs.userCounters[user] = value;\\n        \\n        emit UserCounterUpdated(user, value);\\n    }\\n}\",\"keccak256\":\"0x86ba3aaac79975cfe1dd6175472d52e98b73f4f462c6e19cd861d1d1bc38500f\",\"license\":\"MIT\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\r\\n/******************************************************************************/\\r\\n\\r\\ninterface IDiamondCut {\\r\\n    enum FacetCutAction {Add, Replace, Remove}\\r\\n    // Add=0, Replace=1, Remove=2\\r\\n\\r\\n    struct FacetCut {\\r\\n        address facetAddress;\\r\\n        FacetCutAction action;\\r\\n        bytes4[] functionSelectors;\\r\\n    }\\r\\n\\r\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\r\\n    ///         a function with delegatecall\\r\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\r\\n    /// @param _init The address of the contract or facet to execute _calldata\\r\\n    /// @param _calldata A function call, including function selector and arguments\\r\\n    ///                  _calldata is executed with delegatecall on _init\\r\\n    function diamondCut(\\r\\n        FacetCut[] calldata _diamondCut,\\r\\n        address _init,\\r\\n        bytes calldata _calldata\\r\\n    ) external;\\r\\n    \\r\\n    /// @notice Propose an upgrade to be executed after the timelock period\\r\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\r\\n    /// @param _init The address of the contract or facet to execute _calldata\\r\\n    /// @param _calldata A function call, including function selector and arguments\\r\\n    function proposeDiamondCut(\\r\\n        FacetCut[] calldata _diamondCut,\\r\\n        address _init,\\r\\n        bytes calldata _calldata\\r\\n    ) external;\\r\\n    \\r\\n    /// @notice Execute a previously proposed upgrade after the timelock period\\r\\n    function executeDiamondCut() external;\\r\\n    \\r\\n    /// @notice Cancel a proposed upgrade\\r\\n    function cancelDiamondCut() external;\\r\\n\\r\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\r\\n    event DiamondCutProposed(address indexed proposer, uint256 indexed proposalTime, uint256 executionTime);\\r\\n    event DiamondCutCancelled(address indexed canceller);\\r\\n}\\r\\n\",\"keccak256\":\"0x340a039f0dd63cf19bc669551feec28879457d8b741711ef3513168d620f11bc\",\"license\":\"MIT\"},\"contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\n/* is ERC165 */\\ninterface IERC173 {\\n    /// @dev This emits when ownership of a contract changes.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Get the address of the owner\\n    /// @return owner_ The address of the owner.\\n    function owner() external view returns (address owner_);\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\\n    /// @param _newOwner The address of the new owner of the contract\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0x84fe28f479bf96f1819514dd8493ae15955eda0dbabcbb5f24c3c935075a31d4\",\"license\":\"MIT\"},\"contracts/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\nimport \\\"../interfaces/IERC173.sol\\\"; // for IERC173 interface\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n    event DiamondCutProposed(address indexed proposer, uint256 indexed proposalTime, uint256 executionTime);\\n    event DiamondCutCancelled(address indexed canceller);\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    // Upgrade proposal struct for timelock functionality\\n    struct UpgradeProposal {\\n        IDiamondCut.FacetCut[] diamondCut;\\n        address initAddress;\\n        bytes initCalldata;\\n        uint256 proposalTime;\\n        bool exists;\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n        // Timelock for upgrades (in seconds)\\n        uint256 upgradeTimelock;\\n        // Storage for the current upgrade proposal\\n        UpgradeProposal upgradeProposal;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    // Timelock constants\\n    uint256 constant DEFAULT_UPGRADE_TIMELOCK = 2 days;\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n\\n    // Initialize timelock settings for upgrade proposals\\n    function initializeUpgradeTimelock(uint256 _timelock) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(ds.upgradeTimelock == 0, \\\"LibDiamond: Timelock already initialized\\\");\\n        ds.upgradeTimelock = _timelock > 0 ? _timelock : DEFAULT_UPGRADE_TIMELOCK;\\n    }\\n\\n    // Propose a diamond cut to be executed after the timelock\\n    function proposeDiamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(!ds.upgradeProposal.exists, \\\"LibDiamond: Upgrade already proposed\\\");\\n        require(ds.upgradeTimelock > 0, \\\"LibDiamond: Timelock not initialized\\\");\\n        \\n        // Create a deep copy of the diamond cut to store in the proposal\\n        IDiamondCut.FacetCut[] memory diamondCutCopy = new IDiamondCut.FacetCut[](_diamondCut.length);\\n        for (uint256 i = 0; i < _diamondCut.length; i++) {\\n            diamondCutCopy[i] = _diamondCut[i];\\n            \\n            // Deep copy the function selectors array\\n            bytes4[] memory selectors = new bytes4[](_diamondCut[i].functionSelectors.length);\\n            for (uint256 j = 0; j < _diamondCut[i].functionSelectors.length; j++) {\\n                selectors[j] = _diamondCut[i].functionSelectors[j];\\n            }\\n            diamondCutCopy[i].functionSelectors = selectors;\\n        }\\n        \\n        // Store the proposal\\n        // Create empty array in storage first\\n        delete ds.upgradeProposal.diamondCut;\\n        \\n        // Manually copy each element and its nested arrays to storage\\n        for (uint256 i = 0; i < _diamondCut.length; i++) {\\n            // Create a new struct in storage by pushing an empty element first\\n            ds.upgradeProposal.diamondCut.push();\\n            \\n            // Now set the values for this element's fields\\n            ds.upgradeProposal.diamondCut[i].facetAddress = _diamondCut[i].facetAddress;\\n            ds.upgradeProposal.diamondCut[i].action = _diamondCut[i].action;\\n            \\n            // For the selectors array, we need to handle it separately\\n            // Clear any existing selectors to ensure clean state\\n            delete ds.upgradeProposal.diamondCut[i].functionSelectors;\\n            \\n            // Copy each selector individually\\n            for (uint256 j = 0; j < _diamondCut[i].functionSelectors.length; j++) {\\n                ds.upgradeProposal.diamondCut[i].functionSelectors.push(_diamondCut[i].functionSelectors[j]);\\n            }\\n        }\\n        ds.upgradeProposal.initAddress = _init;\\n        ds.upgradeProposal.initCalldata = _calldata;\\n        ds.upgradeProposal.proposalTime = block.timestamp;\\n        ds.upgradeProposal.exists = true;\\n        \\n        emit DiamondCutProposed(msg.sender, block.timestamp, block.timestamp + ds.upgradeTimelock);\\n    }\\n    \\n    // Execute a proposed diamond cut after the timelock period\\n    function executeDiamondCut() internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(ds.upgradeProposal.exists, \\\"LibDiamond: No upgrade proposal exists\\\");\\n        require(\\n            block.timestamp >= ds.upgradeProposal.proposalTime + ds.upgradeTimelock,\\n            \\\"LibDiamond: Timelock period not elapsed\\\"\\n        );\\n        \\n        // Execute the diamond cut\\n        diamondCut(\\n            ds.upgradeProposal.diamondCut,\\n            ds.upgradeProposal.initAddress,\\n            ds.upgradeProposal.initCalldata\\n        );\\n        \\n        // Reset the proposal\\n        delete ds.upgradeProposal;\\n    }\\n    \\n    // Cancel a proposed diamond cut\\n    function cancelDiamondCut() internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(ds.upgradeProposal.exists, \\\"LibDiamond: No upgrade proposal exists\\\");\\n        \\n        // Reset the proposal\\n        delete ds.upgradeProposal;\\n        \\n        emit DiamondCutCancelled(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x3d3bb1df2d228d2738f7ce7b9f634653edda3f638a335b92565e9b42e941b1bb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506106dd806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80638ada066e116100665780638ada066e14610106578063aaa089141461011b578063d09de08a1461012e578063dbdf7fce14610136578063e1aad65b1461013e57600080fd5b806316cb1bc7146100985780632baeceb7146100e157806338c6a5c4146100eb5780638806a32f146100fe575b600080fd5b6100ce6100a63660046105c0565b6001600160a01b03166000908152600080516020610688833981519152602052604090205490565b6040519081526020015b60405180910390f35b6100e96101b2565b005b6100e96100f93660046105e2565b610297565b6100e9610300565b600080516020610668833981519152546100ce565b6100e96101293660046105fb565b610385565b6100e96103ff565b6100e9610477565b6101937fb7b015d605ece0e8fe533fe842b448ce2b6465e6d573f424dd3872fbf1824257547fb7b015d605ece0e8fe533fe842b448ce2b6465e6d573f424dd3872fbf1824258546001600160a01b0390911691565b604080516001600160a01b0390931683526020830191909152016100d8565b60008051602061066883398151915280546102275760405162461bcd60e51b815260206004820152602a60248201527f436f756e74657246616365743a20436f756e7465722063616e6e6f7420676f2060448201526962656c6f77207a65726f60b01b60648201526084015b60405180910390fd5b600181600001600082825461023c919061063b565b90915550506001810180546001600160a01b0319163390811790915542600283015581546040519081527f9cdaca08b82c2d66f0eb8c0ca62ab7a1e1da2238c2edd03b19e1accc9e806d6a906020015b60405180910390a250565b3360008181526000805160206106888339815191526020908152604091829020849055905183815260008051602061066883398151915292917feb7bf040c0984f14f21d0089c5ef66e5b6f076260cb92ab3195cc4bb1c1cd8f791015b60405180910390a25050565b336000908152600080516020610688833981519152602052604081208054600080516020610668833981519152926001929161033d908490610654565b90915550503360008181526003830160209081526040918290205491519182527feb7bf040c0984f14f21d0089c5ef66e5b6f076260cb92ab3195cc4bb1c1cd8f7910161028c565b61038d61051b565b6001600160a01b03821660008181526000805160206106888339815191526020908152604091829020849055905183815260008051602061066883398151915292917feb7bf040c0984f14f21d0089c5ef66e5b6f076260cb92ab3195cc4bb1c1cd8f7910160405180910390a2505050565b60008051602061066883398151915280546001908290600090610423908490610654565b90915550506001810180546001600160a01b0319163390811790915542600283015581546040519081527f59950fb23669ee30425f6d79758e75fae698a6c88b2982f2980638d8bcd9397d9060200161028c565b61047f61051b565b6000805160206106688339815191528054600082557fb7b015d605ece0e8fe533fe842b448ce2b6465e6d573f424dd3872fbf182425780546001600160a01b03191633908117909155427fb7b015d605ece0e8fe533fe842b448ce2b6465e6d573f424dd3872fbf1824258556040518281527f0c4f92d0724fb3d16c74d6fd66f78fe790dbfb5849f7691e9931db60bb64aad4906020016102f4565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c600401546001600160a01b031633146105a25760405162461bcd60e51b815260206004820152602260248201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60448201526132b960f11b606482015260840161021e565b565b80356001600160a01b03811681146105bb57600080fd5b919050565b6000602082840312156105d257600080fd5b6105db826105a4565b9392505050565b6000602082840312156105f457600080fd5b5035919050565b6000806040838503121561060e57600080fd5b610617836105a4565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561064e5761064e610625565b92915050565b8082018082111561064e5761064e61062556feb7b015d605ece0e8fe533fe842b448ce2b6465e6d573f424dd3872fbf1824256b7b015d605ece0e8fe533fe842b448ce2b6465e6d573f424dd3872fbf1824259a26469706673582212209ceef76383b7a0da42240da3ea0b699487c28288f3d3bab802619cc4e79239e564736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c80638ada066e116100665780638ada066e14610106578063aaa089141461011b578063d09de08a1461012e578063dbdf7fce14610136578063e1aad65b1461013e57600080fd5b806316cb1bc7146100985780632baeceb7146100e157806338c6a5c4146100eb5780638806a32f146100fe575b600080fd5b6100ce6100a63660046105c0565b6001600160a01b03166000908152600080516020610688833981519152602052604090205490565b6040519081526020015b60405180910390f35b6100e96101b2565b005b6100e96100f93660046105e2565b610297565b6100e9610300565b600080516020610668833981519152546100ce565b6100e96101293660046105fb565b610385565b6100e96103ff565b6100e9610477565b6101937fb7b015d605ece0e8fe533fe842b448ce2b6465e6d573f424dd3872fbf1824257547fb7b015d605ece0e8fe533fe842b448ce2b6465e6d573f424dd3872fbf1824258546001600160a01b0390911691565b604080516001600160a01b0390931683526020830191909152016100d8565b60008051602061066883398151915280546102275760405162461bcd60e51b815260206004820152602a60248201527f436f756e74657246616365743a20436f756e7465722063616e6e6f7420676f2060448201526962656c6f77207a65726f60b01b60648201526084015b60405180910390fd5b600181600001600082825461023c919061063b565b90915550506001810180546001600160a01b0319163390811790915542600283015581546040519081527f9cdaca08b82c2d66f0eb8c0ca62ab7a1e1da2238c2edd03b19e1accc9e806d6a906020015b60405180910390a250565b3360008181526000805160206106888339815191526020908152604091829020849055905183815260008051602061066883398151915292917feb7bf040c0984f14f21d0089c5ef66e5b6f076260cb92ab3195cc4bb1c1cd8f791015b60405180910390a25050565b336000908152600080516020610688833981519152602052604081208054600080516020610668833981519152926001929161033d908490610654565b90915550503360008181526003830160209081526040918290205491519182527feb7bf040c0984f14f21d0089c5ef66e5b6f076260cb92ab3195cc4bb1c1cd8f7910161028c565b61038d61051b565b6001600160a01b03821660008181526000805160206106888339815191526020908152604091829020849055905183815260008051602061066883398151915292917feb7bf040c0984f14f21d0089c5ef66e5b6f076260cb92ab3195cc4bb1c1cd8f7910160405180910390a2505050565b60008051602061066883398151915280546001908290600090610423908490610654565b90915550506001810180546001600160a01b0319163390811790915542600283015581546040519081527f59950fb23669ee30425f6d79758e75fae698a6c88b2982f2980638d8bcd9397d9060200161028c565b61047f61051b565b6000805160206106688339815191528054600082557fb7b015d605ece0e8fe533fe842b448ce2b6465e6d573f424dd3872fbf182425780546001600160a01b03191633908117909155427fb7b015d605ece0e8fe533fe842b448ce2b6465e6d573f424dd3872fbf1824258556040518281527f0c4f92d0724fb3d16c74d6fd66f78fe790dbfb5849f7691e9931db60bb64aad4906020016102f4565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c600401546001600160a01b031633146105a25760405162461bcd60e51b815260206004820152602260248201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60448201526132b960f11b606482015260840161021e565b565b80356001600160a01b03811681146105bb57600080fd5b919050565b6000602082840312156105d257600080fd5b6105db826105a4565b9392505050565b6000602082840312156105f457600080fd5b5035919050565b6000806040838503121561060e57600080fd5b610617836105a4565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561064e5761064e610625565b92915050565b8082018082111561064e5761064e61062556feb7b015d605ece0e8fe533fe842b448ce2b6465e6d573f424dd3872fbf1824256b7b015d605ece0e8fe533fe842b448ce2b6465e6d573f424dd3872fbf1824259a26469706673582212209ceef76383b7a0da42240da3ea0b699487c28288f3d3bab802619cc4e79239e564736f6c63430008140033",
  "devdoc": {
    "details": "A sample facet that demonstrates basic diamond functionality with a simple counter      This facet provides increment, decrement, and view operations for a counter value      stored in diamond storage. It serves as an example of how to implement business      logic in a diamond facet while using the diamond storage pattern.",
    "kind": "dev",
    "methods": {
      "decrement()": {
        "details": "Decreases the global counter and updates metadata      Reverts if counter would go below zero"
      },
      "getCounter()": {
        "returns": {
          "_0": "The current counter value"
        }
      },
      "getCounterMetadata()": {
        "returns": {
          "lastUpdateTimestamp": "Timestamp of the last update",
          "lastUpdater": "Address of the last user to update the counter"
        }
      },
      "getUserCounter(address)": {
        "params": {
          "user": "The address of the user"
        },
        "returns": {
          "_0": "The user's counter value"
        }
      },
      "increment()": {
        "details": "Increases the global counter and updates metadata"
      },
      "incrementUserCounter()": {
        "details": "Each user has their own counter independent of the global one"
      },
      "resetCounter()": {
        "details": "Only the diamond owner can reset the counter"
      },
      "setUserCounter(uint256)": {
        "details": "Only the user themselves or the diamond owner can set their counter",
        "params": {
          "value": "The new counter value"
        }
      },
      "setUserCounterAsOwner(address,uint256)": {
        "details": "Only the diamond owner can set other users' counters",
        "params": {
          "user": "The user whose counter to set",
          "value": "The new counter value"
        }
      }
    },
    "title": "CounterFacet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "decrement()": {
        "notice": "Decrement the global counter by 1"
      },
      "getCounter()": {
        "notice": "Get the current global counter value"
      },
      "getCounterMetadata()": {
        "notice": "Get metadata about the last counter update"
      },
      "getUserCounter(address)": {
        "notice": "Get a user's personal counter value"
      },
      "increment()": {
        "notice": "Increment the global counter by 1"
      },
      "incrementUserCounter()": {
        "notice": "Increment a user's personal counter"
      },
      "resetCounter()": {
        "notice": "Reset the global counter to zero"
      },
      "setUserCounter(uint256)": {
        "notice": "Set a user's counter to a specific value"
      },
      "setUserCounterAsOwner(address,uint256)": {
        "notice": "Set any user's counter (owner only)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}