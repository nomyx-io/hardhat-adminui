{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "_diamondCut",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_init",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "DiamondCut",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "_diamondCut",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_init",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "DiamondCut",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "canceller",
          "type": "address"
        }
      ],
      "name": "DiamondCutCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "canceller",
          "type": "address"
        }
      ],
      "name": "DiamondCutCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "executionTime",
          "type": "uint256"
        }
      ],
      "name": "DiamondCutProposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "executionTime",
          "type": "uint256"
        }
      ],
      "name": "DiamondCutProposed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "cancelDiamondCut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "diamondCut",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executeDiamondCut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "_diamondCut",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_init",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "proposeDiamondCut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0a0d7fd62a99ef7d404fda02680938d5179202417720ba353f904cdb940c341e",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1884982",
    "logsBloom": "0x
    "blockHash": "0x4efd90a8e0af88d0f5a49e727baed3ba8e6a547cdfcf13b9189bcb3b31ed37ab",
    "transactionHash": "0x0a0d7fd62a99ef7d404fda02680938d5179202417720ba353f904cdb940c341e",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1884982",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b953995d4bdc99a8a1a5a5bbfbdc36f1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"indexed\":false,\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"DiamondCut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"indexed\":false,\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"DiamondCut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"canceller\",\"type\":\"address\"}],\"name\":\"DiamondCutCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"canceller\",\"type\":\"address\"}],\"name\":\"DiamondCutCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionTime\",\"type\":\"uint256\"}],\"name\":\"DiamondCutProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionTime\",\"type\":\"uint256\"}],\"name\":\"DiamondCutProposed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"cancelDiamondCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"diamondCut\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeDiamondCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"proposeDiamondCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the diamond cut functionality with a timelock mechanism.      The diamond cut operation allows adding, replacing, or removing facets and functions      from the diamond proxy contract. This implementation adds a security timelock      that requires a two-step process (propose and execute) for diamond cuts,      enhancing security by allowing time for review before execution.      Based on the EIP-2535 Diamond Standard.\",\"kind\":\"dev\",\"methods\":{\"cancelDiamondCut()\":{\"custom:security\":\"Only callable by the contract owner\",\"details\":\"Allows the contract owner to cancel a pending diamond cut proposal      before it is executed. This is useful if errors are found in the      proposed changes during the timelock period or if the changes      are no longer desired. Once cancelled, the proposal is completely      removed and a new proposal would need to be submitted if needed.\"},\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"custom:security\":\"Always reverts with an error message directing to the new functions\",\"details\":\"THIS FUNCTION IS DEPRECATED and will always revert when called.      It has been replaced by the more secure two-step process using      proposeDiamondCut() followed by executeDiamondCut(), which adds a timelock      security feature. This function remains to maintain compatibility with      the IDiamondCut interface but cannot be used.\"},\"executeDiamondCut()\":{\"custom:security\":\"Reverts if no diamond cut is proposed, if the timelock period                  hasn't expired, or if the initialization call fails\",\"details\":\"Second and final step in the two-step diamond modification process.      This executes the changes that were previously proposed, but only if      the required timelock period has passed. The timelock period is a      security measure to allow stakeholders time to review proposed changes.      Only the contract owner can execute the diamond cut.\"},\"proposeDiamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"details\":\"First step in the two-step process for modifying the diamond. This queues up      changes that can only be executed after a predefined timelock period.      Only the contract owner can propose changes.\",\"params\":{\"_calldata\":\"A function call, including function selector and arguments, for initialization\",\"_diamondCut\":\"Contains the facet addresses and function selectors to add, replace, or remove\",\"_init\":\"The address of the contract or facet to execute initialization code\"}}},\"title\":\"DiamondCutFacet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cancelDiamondCut()\":{\"notice\":\"Cancel a previously proposed diamond cut\"},\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"notice\":\"Add/replace/remove any number of functions and optionally execute initialization code\"},\"executeDiamondCut()\":{\"notice\":\"Execute a previously proposed diamond cut after the timelock period has elapsed\"},\"proposeDiamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"notice\":\"Propose a diamond cut to be executed after the timelock period\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/DiamondCutFacet.sol\":\"DiamondCutFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\"},\"contracts/facets/DiamondCutFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n*\\n* Implementation of the diamond cut functions.\\n/******************************************************************************/\\n\\nimport { LibDiamond } from \\\"../libraries/LibDiamond.sol\\\";\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\nimport { IERC165 } from \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\n\\n/**\\n * @title DiamondCutFacet\\n * @dev Implementation of the diamond cut functionality with a timelock mechanism.\\n *      The diamond cut operation allows adding, replacing, or removing facets and functions\\n *      from the diamond proxy contract. This implementation adds a security timelock\\n *      that requires a two-step process (propose and execute) for diamond cuts,\\n *      enhancing security by allowing time for review before execution.\\n *      Based on the EIP-2535 Diamond Standard.\\n */\\ncontract DiamondCutFacet is IDiamondCut {\\n    /// @notice Propose a diamond cut to be executed after the timelock period\\n    /// @dev First step in the two-step process for modifying the diamond. This queues up\\n    ///      changes that can only be executed after a predefined timelock period.\\n    ///      Only the contract owner can propose changes.\\n    /// @param _diamondCut Contains the facet addresses and function selectors to add, replace, or remove\\n    /// @param _init The address of the contract or facet to execute initialization code\\n    /// @param _calldata A function call, including function selector and arguments, for initialization\\n    function proposeDiamondCut(\\n        IDiamondCut.FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external {\\n        LibDiamond.enforceIsContractOwner();\\n        LibDiamond.proposeDiamondCut(_diamondCut, _init, _calldata);\\n    }\\n    \\n    /// @notice Execute a previously proposed diamond cut after the timelock period has elapsed\\n    /// @dev Second and final step in the two-step diamond modification process.\\n    ///      This executes the changes that were previously proposed, but only if\\n    ///      the required timelock period has passed. The timelock period is a\\n    ///      security measure to allow stakeholders time to review proposed changes.\\n    ///      Only the contract owner can execute the diamond cut.\\n    /// @custom:security Reverts if no diamond cut is proposed, if the timelock period\\n    ///                  hasn't expired, or if the initialization call fails\\n    function executeDiamondCut() external {\\n        LibDiamond.enforceIsContractOwner();\\n        LibDiamond.executeDiamondCut();\\n    }\\n    \\n    /// @notice Cancel a previously proposed diamond cut\\n    /// @dev Allows the contract owner to cancel a pending diamond cut proposal\\n    ///      before it is executed. This is useful if errors are found in the\\n    ///      proposed changes during the timelock period or if the changes\\n    ///      are no longer desired. Once cancelled, the proposal is completely\\n    ///      removed and a new proposal would need to be submitted if needed.\\n    /// @custom:security Only callable by the contract owner\\n    function cancelDiamondCut() external {\\n        LibDiamond.enforceIsContractOwner();\\n        LibDiamond.cancelDiamondCut();\\n    }\\n    \\n    /// @notice Add/replace/remove any number of functions and optionally execute initialization code\\n    /// @dev THIS FUNCTION IS DEPRECATED and will always revert when called.\\n    ///      It has been replaced by the more secure two-step process using\\n    ///      proposeDiamondCut() followed by executeDiamondCut(), which adds a timelock\\n    ///      security feature. This function remains to maintain compatibility with\\n    ///      the IDiamondCut interface but cannot be used.\\n    /// @custom:security Always reverts with an error message directing to the new functions\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] calldata,\\n        address,\\n        bytes calldata\\n    ) external pure override {\\n        revert(\\\"Function deprecated: Use proposeDiamondCut() + executeDiamondCut() instead\\\");\\n    }\\n}\",\"keccak256\":\"0xa2465548a92c33993cd90ae082039e69d44b5186efe66d5cc6e91b7b9d446368\",\"license\":\"MIT\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\r\\n/******************************************************************************/\\r\\n\\r\\ninterface IDiamondCut {\\r\\n    enum FacetCutAction {Add, Replace, Remove}\\r\\n    // Add=0, Replace=1, Remove=2\\r\\n\\r\\n    struct FacetCut {\\r\\n        address facetAddress;\\r\\n        FacetCutAction action;\\r\\n        bytes4[] functionSelectors;\\r\\n    }\\r\\n\\r\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\r\\n    ///         a function with delegatecall\\r\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\r\\n    /// @param _init The address of the contract or facet to execute _calldata\\r\\n    /// @param _calldata A function call, including function selector and arguments\\r\\n    ///                  _calldata is executed with delegatecall on _init\\r\\n    function diamondCut(\\r\\n        FacetCut[] calldata _diamondCut,\\r\\n        address _init,\\r\\n        bytes calldata _calldata\\r\\n    ) external;\\r\\n    \\r\\n    /// @notice Propose an upgrade to be executed after the timelock period\\r\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\r\\n    /// @param _init The address of the contract or facet to execute _calldata\\r\\n    /// @param _calldata A function call, including function selector and arguments\\r\\n    function proposeDiamondCut(\\r\\n        FacetCut[] calldata _diamondCut,\\r\\n        address _init,\\r\\n        bytes calldata _calldata\\r\\n    ) external;\\r\\n    \\r\\n    /// @notice Execute a previously proposed upgrade after the timelock period\\r\\n    function executeDiamondCut() external;\\r\\n    \\r\\n    /// @notice Cancel a proposed upgrade\\r\\n    function cancelDiamondCut() external;\\r\\n\\r\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\r\\n    event DiamondCutProposed(address indexed proposer, uint256 indexed proposalTime, uint256 executionTime);\\r\\n    event DiamondCutCancelled(address indexed canceller);\\r\\n}\\r\\n\",\"keccak256\":\"0x340a039f0dd63cf19bc669551feec28879457d8b741711ef3513168d620f11bc\",\"license\":\"MIT\"},\"contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\n/* is ERC165 */\\ninterface IERC173 {\\n    /// @dev This emits when ownership of a contract changes.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Get the address of the owner\\n    /// @return owner_ The address of the owner.\\n    function owner() external view returns (address owner_);\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\\n    /// @param _newOwner The address of the new owner of the contract\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0x84fe28f479bf96f1819514dd8493ae15955eda0dbabcbb5f24c3c935075a31d4\",\"license\":\"MIT\"},\"contracts/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\nimport \\\"../interfaces/IERC173.sol\\\"; // for IERC173 interface\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n    event DiamondCutProposed(address indexed proposer, uint256 indexed proposalTime, uint256 executionTime);\\n    event DiamondCutCancelled(address indexed canceller);\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    // Upgrade proposal struct for timelock functionality\\n    struct UpgradeProposal {\\n        IDiamondCut.FacetCut[] diamondCut;\\n        address initAddress;\\n        bytes initCalldata;\\n        uint256 proposalTime;\\n        bool exists;\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n        // Timelock for upgrades (in seconds)\\n        uint256 upgradeTimelock;\\n        // Storage for the current upgrade proposal\\n        UpgradeProposal upgradeProposal;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    // Timelock constants\\n    uint256 constant DEFAULT_UPGRADE_TIMELOCK = 2 days;\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n\\n    // Initialize timelock settings for upgrade proposals\\n    function initializeUpgradeTimelock(uint256 _timelock) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(ds.upgradeTimelock == 0, \\\"LibDiamond: Timelock already initialized\\\");\\n        ds.upgradeTimelock = _timelock > 0 ? _timelock : DEFAULT_UPGRADE_TIMELOCK;\\n    }\\n\\n    // Propose a diamond cut to be executed after the timelock\\n    function proposeDiamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(!ds.upgradeProposal.exists, \\\"LibDiamond: Upgrade already proposed\\\");\\n        require(ds.upgradeTimelock > 0, \\\"LibDiamond: Timelock not initialized\\\");\\n        \\n        // Create a deep copy of the diamond cut to store in the proposal\\n        IDiamondCut.FacetCut[] memory diamondCutCopy = new IDiamondCut.FacetCut[](_diamondCut.length);\\n        for (uint256 i = 0; i < _diamondCut.length; i++) {\\n            diamondCutCopy[i] = _diamondCut[i];\\n            \\n            // Deep copy the function selectors array\\n            bytes4[] memory selectors = new bytes4[](_diamondCut[i].functionSelectors.length);\\n            for (uint256 j = 0; j < _diamondCut[i].functionSelectors.length; j++) {\\n                selectors[j] = _diamondCut[i].functionSelectors[j];\\n            }\\n            diamondCutCopy[i].functionSelectors = selectors;\\n        }\\n        \\n        // Store the proposal\\n        // Create empty array in storage first\\n        delete ds.upgradeProposal.diamondCut;\\n        \\n        // Manually copy each element and its nested arrays to storage\\n        for (uint256 i = 0; i < _diamondCut.length; i++) {\\n            // Create a new struct in storage by pushing an empty element first\\n            ds.upgradeProposal.diamondCut.push();\\n            \\n            // Now set the values for this element's fields\\n            ds.upgradeProposal.diamondCut[i].facetAddress = _diamondCut[i].facetAddress;\\n            ds.upgradeProposal.diamondCut[i].action = _diamondCut[i].action;\\n            \\n            // For the selectors array, we need to handle it separately\\n            // Clear any existing selectors to ensure clean state\\n            delete ds.upgradeProposal.diamondCut[i].functionSelectors;\\n            \\n            // Copy each selector individually\\n            for (uint256 j = 0; j < _diamondCut[i].functionSelectors.length; j++) {\\n                ds.upgradeProposal.diamondCut[i].functionSelectors.push(_diamondCut[i].functionSelectors[j]);\\n            }\\n        }\\n        ds.upgradeProposal.initAddress = _init;\\n        ds.upgradeProposal.initCalldata = _calldata;\\n        ds.upgradeProposal.proposalTime = block.timestamp;\\n        ds.upgradeProposal.exists = true;\\n        \\n        emit DiamondCutProposed(msg.sender, block.timestamp, block.timestamp + ds.upgradeTimelock);\\n    }\\n    \\n    // Execute a proposed diamond cut after the timelock period\\n    function executeDiamondCut() internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(ds.upgradeProposal.exists, \\\"LibDiamond: No upgrade proposal exists\\\");\\n        require(\\n            block.timestamp >= ds.upgradeProposal.proposalTime + ds.upgradeTimelock,\\n            \\\"LibDiamond: Timelock period not elapsed\\\"\\n        );\\n        \\n        // Execute the diamond cut\\n        diamondCut(\\n            ds.upgradeProposal.diamondCut,\\n            ds.upgradeProposal.initAddress,\\n            ds.upgradeProposal.initCalldata\\n        );\\n        \\n        // Reset the proposal\\n        delete ds.upgradeProposal;\\n    }\\n    \\n    // Cancel a proposed diamond cut\\n    function cancelDiamondCut() internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(ds.upgradeProposal.exists, \\\"LibDiamond: No upgrade proposal exists\\\");\\n        \\n        // Reset the proposal\\n        delete ds.upgradeProposal;\\n        \\n        emit DiamondCutCancelled(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x3d3bb1df2d228d2738f7ce7b9f634653edda3f638a335b92565e9b42e941b1bb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612120806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631f931c1c146100515780636fb0599814610066578063bbf2358e1461006e578063f37a5da014610081575b600080fd5b61006461005f366004611986565b610089565b005b61006461010f565b61006461007c366004611986565b610121565b61006461017a565b60405162461bcd60e51b815260206004820152604a60248201527f46756e6374696f6e20646570726563617465643a205573652070726f706f736560448201527f4469616d6f6e644375742829202b20657865637574654469616d6f6e644375746064820152690a0a481a5b9cdd19585960b21b608482015260a4015b60405180910390fd5b61011761018a565b61011f6101ff565b565b61012961018a565b6101736101368587611acc565b8484848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506102c292505050565b5050505050565b61018261018a565b61011f61084b565b60008051602061207f833981519152600401546001600160a01b0316331461011f5760405162461bcd60e51b815260206004820152602260248201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60448201526132b960f11b6064820152608401610106565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c13265460008051602061207f8339815191529060ff166102505760405162461bcd60e51b815260040161010690611c10565b6006810160006102608282611857565b6001820180546001600160a01b031916905561028060028301600061187b565b506000600382018190556004909101805460ff1916905560405133917fde8f30fefd36ba49bcf89e333c7bafb2b3b3bad08938db1630376b2a66b15f6c91a250565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c13265460008051602061207f8339815191529060ff16156103505760405162461bcd60e51b8152602060048201526024808201527f4c69624469616d6f6e643a205570677261646520616c72656164792070726f706044820152631bdcd95960e21b6064820152608401610106565b60008160050154116103b05760405162461bcd60e51b8152602060048201526024808201527f4c69624469616d6f6e643a2054696d656c6f636b206e6f7420696e697469616c6044820152631a5e995960e21b6064820152608401610106565b6000845167ffffffffffffffff8111156103cc576103cc611a38565b60405190808252806020026020018201604052801561041957816020015b604080516060808201835260008083526020830152918101919091528152602001906001900390816103ea5790505b50905060005b85518110156105985785818151811061043a5761043a611c56565b602002602001015182828151811061045457610454611c56565b6020026020010181905250600086828151811061047357610473611c56565b6020026020010151604001515167ffffffffffffffff81111561049857610498611a38565b6040519080825280602002602001820160405280156104c1578160200160208202803683370190505b50905060005b8783815181106104d9576104d9611c56565b60200260200101516040015151811015610561578783815181106104ff576104ff611c56565b602002602001015160400151818151811061051c5761051c611c56565b602002602001015182828151811061053657610536611c56565b6001600160e01b0319909216602092830291909101909101528061055981611c82565b9150506104c7565b508083838151811061057557610575611c56565b60200260200101516040018190525050808061059090611c82565b91505061041f565b506105a7600683016000611857565b60005b85518110156107bc57600683018054600101815560005285518690829081106105d5576105d5611c56565b6020026020010151600001518360060160000182815481106105f9576105f9611c56565b906000526020600020906002020160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555085818151811061064057610640611c56565b60200260200101516020015183600601600001828154811061066457610664611c56565b906000526020600020906002020160000160146101000a81548160ff0219169083600281111561069657610696611c9b565b0217905550600683018054829081106106b1576106b1611c56565b906000526020600020906002020160010160006106ce91906118b5565b60005b8682815181106106e3576106e3611c56565b602002602001015160400151518110156107a9576006840180548390811061070d5761070d611c56565b906000526020600020906002020160010187838151811061073057610730611c56565b602002602001015160400151828151811061074d5761074d611c56565b60209081029190910181015182546001810184556000938452919092206008820401805463ffffffff60079093166004026101000a928302191660e09390931c91909102919091179055806107a181611c82565b9150506106d1565b50806107b481611c82565b9150506105aa565b506007820180546001600160a01b0319166001600160a01b038616179055600882016107e88482611d39565b504260098301819055600a8301805460ff19166001179055600583015433907f11c0a67eabfbe53177aaac87bbbb2f9c5730614d4c5c6a6ec177e86ddfe5c7e0906108339084611df9565b60405190815260200160405180910390a35050505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c13265460008051602061207f8339815191529060ff1661089c5760405162461bcd60e51b815260040161010690611c10565b600581015460098201546108b09190611df9565b42101561090f5760405162461bcd60e51b815260206004820152602760248201527f4c69624469616d6f6e643a2054696d656c6f636b20706572696f64206e6f7420604482015266195b185c1cd95960ca1b6064820152608401610106565b610adf81600601600001805480602002602001604051908101604052809291908181526020016000905b82821015610a385760008481526020908190206040805160608101909152600285810290920180546001600160a01b03811683529193909290840191600160a01b900460ff169081111561098f5761098f611c9b565b60028111156109a0576109a0611c9b565b815260200160018201805480602002602001604051908101604052809291908181526020018280548015610a2057602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116109e25790505b50505050508152505081526020019060010190610939565b5050505060078301546008840180546001600160a01b0390921691610a5c90611cb1565b80601f0160208091040260200160405190810160405280929190818152602001828054610a8890611cb1565b8015610ad55780601f10610aaa57610100808354040283529160200191610ad5565b820191906000526020600020905b815481529060010190602001808311610ab857829003601f168201915b5050505050610b25565b600681016000610aef8282611857565b6001820180546001600160a01b0319169055610b0f60028301600061187b565b5060006003820155600401805460ff1916905550565b60005b8351811015610ceb576000848281518110610b4557610b45611c56565b602002602001015160200151905060006002811115610b6657610b66611c9b565b816002811115610b7857610b78611c9b565b03610bc657610bc1858381518110610b9257610b92611c56565b602002602001015160000151868481518110610bb057610bb0611c56565b602002602001015160400151610d36565b610cd8565b6001816002811115610bda57610bda611c9b565b03610c2357610bc1858381518110610bf457610bf4611c56565b602002602001015160000151868481518110610c1257610c12611c56565b602002602001015160400151610eae565b6002816002811115610c3757610c37611c9b565b03610c8057610bc1858381518110610c5157610c51611c56565b602002602001015160000151868481518110610c6f57610c6f611c56565b60200260200101516040015161103e565b60405162461bcd60e51b815260206004820152602760248201527f4c69624469616d6f6e644375743a20496e636f727265637420466163657443756044820152663a20b1ba34b7b760c91b6064820152608401610106565b5080610ce381611c82565b915050610b28565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673838383604051610d1f93929190611e62565b60405180910390a1610d31828261115c565b505050565b6000815111610d575760405162461bcd60e51b815260040161010690611f62565b60008051602061207f8339815191526001600160a01b038316610d8c5760405162461bcd60e51b815260040161010690611fad565b6001600160a01b0383166000908152600182016020526040812054906001600160601b0382169003610dc257610dc28285611369565b60005b8351811015610173576000848281518110610de257610de2611c56565b6020908102919091018101516001600160e01b031981166000908152918690526040909120549091506001600160a01b03168015610e805760405162461bcd60e51b815260206004820152603560248201527f4c69624469616d6f6e644375743a2043616e2774206164642066756e6374696f6044820152746e207468617420616c72656164792065786973747360581b6064820152608401610106565b610e8c8583868a6113d3565b83610e9681611ff9565b94505050508080610ea690611c82565b915050610dc5565b6000815111610ecf5760405162461bcd60e51b815260040161010690611f62565b60008051602061207f8339815191526001600160a01b038316610f045760405162461bcd60e51b815260040161010690611fad565b6001600160a01b0383166000908152600182016020526040812054906001600160601b0382169003610f3a57610f3a8285611369565b60005b8351811015610173576000848281518110610f5a57610f5a611c56565b6020908102919091018101516001600160e01b031981166000908152918690526040909120549091506001600160a01b0390811690871681036110055760405162461bcd60e51b815260206004820152603860248201527f4c69624469616d6f6e644375743a2043616e2774207265706c6163652066756e60448201527f6374696f6e20776974682073616d652066756e6374696f6e00000000000000006064820152608401610106565b611010858284611473565b61101c8583868a6113d3565b8361102681611ff9565b9450505050808061103690611c82565b915050610f3d565b600081511161105f5760405162461bcd60e51b815260040161010690611f62565b60008051602061207f8339815191526001600160a01b038316156110e45760405162461bcd60e51b815260206004820152603660248201527f4c69624469616d6f6e644375743a2052656d6f76652066616365742061646472604482015275657373206d757374206265206164647265737328302960501b6064820152608401610106565b60005b825181101561115657600083828151811061110457611104611c56565b6020908102919091018101516001600160e01b031981166000908152918590526040909120549091506001600160a01b0316611141848284611473565b5050808061114e90611c82565b9150506110e7565b50505050565b6001600160a01b0382166111e3578051156111df5760405162461bcd60e51b815260206004820152603c60248201527f4c69624469616d6f6e644375743a205f696e697420697320616464726573732860448201527f3029206275745f63616c6c64617461206973206e6f7420656d707479000000006064820152608401610106565b5050565b600081511161125a5760405162461bcd60e51b815260206004820152603d60248201527f4c69624469616d6f6e644375743a205f63616c6c6461746120697320656d707460448201527f7920627574205f696e6974206973206e6f7420616464726573732830290000006064820152608401610106565b6001600160a01b038216301461128c5761128c8260405180606001604052806028815260200161209f60289139611836565b600080836001600160a01b0316836040516112a7919061201f565b600060405180830381855af49150503d80600081146112e2576040519150601f19603f3d011682016040523d82523d6000602084013e6112e7565b606091505b50915091508161115657805115611312578060405162461bcd60e51b8152600401610106919061203b565b60405162461bcd60e51b815260206004820152602660248201527f4c69624469616d6f6e644375743a205f696e69742066756e6374696f6e2072656044820152651d995c9d195960d21b6064820152608401610106565b61138b816040518060600160405280602481526020016120c760249139611836565b6002820180546001600160a01b0390921660008181526001948501602090815260408220860185905594840183559182529290200180546001600160a01b0319169091179055565b6001600160e01b0319831660008181526020868152604080832080546001600160601b03909716600160a01b026001600160a01b0397881617815594909516808352600180890183529583208054968701815583528183206008870401805460e09890981c60046007909816979097026101000a96870263ffffffff9097021990971695909517909555529290915281546001600160a01b031916179055565b6001600160a01b0382166114ef5760405162461bcd60e51b815260206004820152603760248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f76652066756e6360448201527f74696f6e207468617420646f65736e27742065786973740000000000000000006064820152608401610106565b306001600160a01b0383160361155e5760405162461bcd60e51b815260206004820152602e60248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f766520696d6d7560448201526d3a30b1363290333ab731ba34b7b760911b6064820152608401610106565b6001600160e01b03198116600090815260208481526040808320546001600160a01b0386168452600180880190935290832054600160a01b9091046001600160601b031692916115ad91612055565b905080821461169f576001600160a01b038416600090815260018601602052604081208054839081106115e2576115e2611c56565b600091825260208083206008830401546001600160a01b038916845260018a019091526040909220805460079092166004026101000a90920460e01b92508291908590811061163357611633611c56565b600091825260208083206008830401805463ffffffff60079094166004026101000a938402191660e09590951c929092029390931790556001600160e01b03199290921682528690526040902080546001600160a01b0316600160a01b6001600160601b038516021790555b6001600160a01b038416600090815260018601602052604090208054806116c8576116c8612068565b60008281526020808220600860001990940193840401805463ffffffff600460078716026101000a0219169055919092556001600160e01b0319851682528690526040812081905581900361017357600285015460009061172b90600190612055565b6001600160a01b03861660009081526001808901602052604090912001549091508082146117da57600087600201838154811061176a5761176a611c56565b6000918252602090912001546002890180546001600160a01b03909216925082918490811061179b5761179b611c56565b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055929091168152600189810190925260409020018190555b866002018054806117ed576117ed612068565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b0388168252600189810190915260408220015550505050505050565b813b81816111565760405162461bcd60e51b8152600401610106919061203b565b508054600082556002029060005260206000209081019061187891906118da565b50565b50805461188790611cb1565b6000825580601f10611897575050565b601f016020900490600052602060002090810190611878919061190c565b508054600082556007016008900490600052602060002090810190611878919061190c565b808211156119085780546001600160a81b031916815560006118ff60018301826118b5565b506002016118da565b5090565b5b80821115611908576000815560010161190d565b80356001600160a01b038116811461193857600080fd5b919050565b60008083601f84011261194f57600080fd5b50813567ffffffffffffffff81111561196757600080fd5b60208301915083602082850101111561197f57600080fd5b9250929050565b60008060008060006060868803121561199e57600080fd5b853567ffffffffffffffff808211156119b657600080fd5b818801915088601f8301126119ca57600080fd5b8135818111156119d957600080fd5b8960208260051b85010111156119ee57600080fd5b60208301975080965050611a0460208901611921565b94506040880135915080821115611a1a57600080fd5b50611a278882890161193d565b969995985093965092949392505050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715611a7157611a71611a38565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611aa057611aa0611a38565b604052919050565b600067ffffffffffffffff821115611ac257611ac2611a38565b5060051b60200190565b6000611adf611ada84611aa8565b611a77565b83815260208082019190600586811b860136811115611afd57600080fd5b865b81811015611c0357803567ffffffffffffffff80821115611b205760008081fd5b818a01915060608236031215611b365760008081fd5b611b3e611a4e565b611b4783611921565b81528683013560038110611b5b5760008081fd5b8188015260408381013583811115611b735760008081fd5b939093019236601f850112611b8a57600092508283fd5b83359250611b9a611ada84611aa8565b83815292871b84018801928881019036851115611bb75760008081fd5b948901945b84861015611bec5785356001600160e01b031981168114611bdd5760008081fd5b82529489019490890190611bbc565b918301919091525088525050948301948301611aff565b5092979650505050505050565b60208082526026908201527f4c69624469616d6f6e643a204e6f20757067726164652070726f706f73616c2060408201526565786973747360d01b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611c9457611c94611c6c565b5060010190565b634e487b7160e01b600052602160045260246000fd5b600181811c90821680611cc557607f821691505b602082108103611ce557634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610d3157600081815260208120601f850160051c81016020861015611d125750805b601f850160051c820191505b81811015611d3157828155600101611d1e565b505050505050565b815167ffffffffffffffff811115611d5357611d53611a38565b611d6781611d618454611cb1565b84611ceb565b602080601f831160018114611d9c5760008415611d845750858301515b600019600386901b1c1916600185901b178555611d31565b600085815260208120601f198616915b82811015611dcb57888601518255948401946001909101908401611dac565b5085821015611de95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b80820180821115611e0c57611e0c611c6c565b92915050565b60005b83811015611e2d578181015183820152602001611e15565b50506000910152565b60008151808452611e4e816020860160208601611e12565b601f01601f19169290920160200192915050565b60006060808301818452808751808352608092508286019150828160051b8701016020808b0160005b84811015611f3257898403607f19018652815180516001600160a01b03168552838101518986019060038110611ed157634e487b7160e01b600052602160045260246000fd5b868601526040918201519186018a905281519081905290840190600090898701905b80831015611f1d5783516001600160e01b0319168252928601926001929092019190860190611ef3565b50978501979550505090820190600101611e8b565b50506001600160a01b038a16908801528681036040880152611f548189611e36565b9a9950505050505050505050565b6020808252602b908201527f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660408201526a1858d95d081d1bc818dd5d60aa1b606082015260800190565b6020808252602c908201527f4c69624469616d6f6e644375743a204164642066616365742063616e2774206260408201526b65206164647265737328302960a01b606082015260800190565b60006001600160601b0380831681810361201557612015611c6c565b6001019392505050565b60008251612031818460208701611e12565b9190910192915050565b60208152600061204e6020830184611e36565b9392505050565b81810381811115611e0c57611e0c611c6c565b634e487b7160e01b600052603160045260246000fdfec8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c4c69624469616d6f6e644375743a205f696e6974206164647265737320686173206e6f20636f64654c69624469616d6f6e644375743a204e657720666163657420686173206e6f20636f6465a264697066735822122092d865d88fec14bb225c1f31fd167b832c06056f0f4779a70e2a9569f0778f5d64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80631f931c1c146100515780636fb0599814610066578063bbf2358e1461006e578063f37a5da014610081575b600080fd5b61006461005f366004611986565b610089565b005b61006461010f565b61006461007c366004611986565b610121565b61006461017a565b60405162461bcd60e51b815260206004820152604a60248201527f46756e6374696f6e20646570726563617465643a205573652070726f706f736560448201527f4469616d6f6e644375742829202b20657865637574654469616d6f6e644375746064820152690a0a481a5b9cdd19585960b21b608482015260a4015b60405180910390fd5b61011761018a565b61011f6101ff565b565b61012961018a565b6101736101368587611acc565b8484848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506102c292505050565b5050505050565b61018261018a565b61011f61084b565b60008051602061207f833981519152600401546001600160a01b0316331461011f5760405162461bcd60e51b815260206004820152602260248201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60448201526132b960f11b6064820152608401610106565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c13265460008051602061207f8339815191529060ff166102505760405162461bcd60e51b815260040161010690611c10565b6006810160006102608282611857565b6001820180546001600160a01b031916905561028060028301600061187b565b506000600382018190556004909101805460ff1916905560405133917fde8f30fefd36ba49bcf89e333c7bafb2b3b3bad08938db1630376b2a66b15f6c91a250565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c13265460008051602061207f8339815191529060ff16156103505760405162461bcd60e51b8152602060048201526024808201527f4c69624469616d6f6e643a205570677261646520616c72656164792070726f706044820152631bdcd95960e21b6064820152608401610106565b60008160050154116103b05760405162461bcd60e51b8152602060048201526024808201527f4c69624469616d6f6e643a2054696d656c6f636b206e6f7420696e697469616c6044820152631a5e995960e21b6064820152608401610106565b6000845167ffffffffffffffff8111156103cc576103cc611a38565b60405190808252806020026020018201604052801561041957816020015b604080516060808201835260008083526020830152918101919091528152602001906001900390816103ea5790505b50905060005b85518110156105985785818151811061043a5761043a611c56565b602002602001015182828151811061045457610454611c56565b6020026020010181905250600086828151811061047357610473611c56565b6020026020010151604001515167ffffffffffffffff81111561049857610498611a38565b6040519080825280602002602001820160405280156104c1578160200160208202803683370190505b50905060005b8783815181106104d9576104d9611c56565b60200260200101516040015151811015610561578783815181106104ff576104ff611c56565b602002602001015160400151818151811061051c5761051c611c56565b602002602001015182828151811061053657610536611c56565b6001600160e01b0319909216602092830291909101909101528061055981611c82565b9150506104c7565b508083838151811061057557610575611c56565b60200260200101516040018190525050808061059090611c82565b91505061041f565b506105a7600683016000611857565b60005b85518110156107bc57600683018054600101815560005285518690829081106105d5576105d5611c56565b6020026020010151600001518360060160000182815481106105f9576105f9611c56565b906000526020600020906002020160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555085818151811061064057610640611c56565b60200260200101516020015183600601600001828154811061066457610664611c56565b906000526020600020906002020160000160146101000a81548160ff0219169083600281111561069657610696611c9b565b0217905550600683018054829081106106b1576106b1611c56565b906000526020600020906002020160010160006106ce91906118b5565b60005b8682815181106106e3576106e3611c56565b602002602001015160400151518110156107a9576006840180548390811061070d5761070d611c56565b906000526020600020906002020160010187838151811061073057610730611c56565b602002602001015160400151828151811061074d5761074d611c56565b60209081029190910181015182546001810184556000938452919092206008820401805463ffffffff60079093166004026101000a928302191660e09390931c91909102919091179055806107a181611c82565b9150506106d1565b50806107b481611c82565b9150506105aa565b506007820180546001600160a01b0319166001600160a01b038616179055600882016107e88482611d39565b504260098301819055600a8301805460ff19166001179055600583015433907f11c0a67eabfbe53177aaac87bbbb2f9c5730614d4c5c6a6ec177e86ddfe5c7e0906108339084611df9565b60405190815260200160405180910390a35050505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c13265460008051602061207f8339815191529060ff1661089c5760405162461bcd60e51b815260040161010690611c10565b600581015460098201546108b09190611df9565b42101561090f5760405162461bcd60e51b815260206004820152602760248201527f4c69624469616d6f6e643a2054696d656c6f636b20706572696f64206e6f7420604482015266195b185c1cd95960ca1b6064820152608401610106565b610adf81600601600001805480602002602001604051908101604052809291908181526020016000905b82821015610a385760008481526020908190206040805160608101909152600285810290920180546001600160a01b03811683529193909290840191600160a01b900460ff169081111561098f5761098f611c9b565b60028111156109a0576109a0611c9b565b815260200160018201805480602002602001604051908101604052809291908181526020018280548015610a2057602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116109e25790505b50505050508152505081526020019060010190610939565b5050505060078301546008840180546001600160a01b0390921691610a5c90611cb1565b80601f0160208091040260200160405190810160405280929190818152602001828054610a8890611cb1565b8015610ad55780601f10610aaa57610100808354040283529160200191610ad5565b820191906000526020600020905b815481529060010190602001808311610ab857829003601f168201915b5050505050610b25565b600681016000610aef8282611857565b6001820180546001600160a01b0319169055610b0f60028301600061187b565b5060006003820155600401805460ff1916905550565b60005b8351811015610ceb576000848281518110610b4557610b45611c56565b602002602001015160200151905060006002811115610b6657610b66611c9b565b816002811115610b7857610b78611c9b565b03610bc657610bc1858381518110610b9257610b92611c56565b602002602001015160000151868481518110610bb057610bb0611c56565b602002602001015160400151610d36565b610cd8565b6001816002811115610bda57610bda611c9b565b03610c2357610bc1858381518110610bf457610bf4611c56565b602002602001015160000151868481518110610c1257610c12611c56565b602002602001015160400151610eae565b6002816002811115610c3757610c37611c9b565b03610c8057610bc1858381518110610c5157610c51611c56565b602002602001015160000151868481518110610c6f57610c6f611c56565b60200260200101516040015161103e565b60405162461bcd60e51b815260206004820152602760248201527f4c69624469616d6f6e644375743a20496e636f727265637420466163657443756044820152663a20b1ba34b7b760c91b6064820152608401610106565b5080610ce381611c82565b915050610b28565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673838383604051610d1f93929190611e62565b60405180910390a1610d31828261115c565b505050565b6000815111610d575760405162461bcd60e51b815260040161010690611f62565b60008051602061207f8339815191526001600160a01b038316610d8c5760405162461bcd60e51b815260040161010690611fad565b6001600160a01b0383166000908152600182016020526040812054906001600160601b0382169003610dc257610dc28285611369565b60005b8351811015610173576000848281518110610de257610de2611c56565b6020908102919091018101516001600160e01b031981166000908152918690526040909120549091506001600160a01b03168015610e805760405162461bcd60e51b815260206004820152603560248201527f4c69624469616d6f6e644375743a2043616e2774206164642066756e6374696f6044820152746e207468617420616c72656164792065786973747360581b6064820152608401610106565b610e8c8583868a6113d3565b83610e9681611ff9565b94505050508080610ea690611c82565b915050610dc5565b6000815111610ecf5760405162461bcd60e51b815260040161010690611f62565b60008051602061207f8339815191526001600160a01b038316610f045760405162461bcd60e51b815260040161010690611fad565b6001600160a01b0383166000908152600182016020526040812054906001600160601b0382169003610f3a57610f3a8285611369565b60005b8351811015610173576000848281518110610f5a57610f5a611c56565b6020908102919091018101516001600160e01b031981166000908152918690526040909120549091506001600160a01b0390811690871681036110055760405162461bcd60e51b815260206004820152603860248201527f4c69624469616d6f6e644375743a2043616e2774207265706c6163652066756e60448201527f6374696f6e20776974682073616d652066756e6374696f6e00000000000000006064820152608401610106565b611010858284611473565b61101c8583868a6113d3565b8361102681611ff9565b9450505050808061103690611c82565b915050610f3d565b600081511161105f5760405162461bcd60e51b815260040161010690611f62565b60008051602061207f8339815191526001600160a01b038316156110e45760405162461bcd60e51b815260206004820152603660248201527f4c69624469616d6f6e644375743a2052656d6f76652066616365742061646472604482015275657373206d757374206265206164647265737328302960501b6064820152608401610106565b60005b825181101561115657600083828151811061110457611104611c56565b6020908102919091018101516001600160e01b031981166000908152918590526040909120549091506001600160a01b0316611141848284611473565b5050808061114e90611c82565b9150506110e7565b50505050565b6001600160a01b0382166111e3578051156111df5760405162461bcd60e51b815260206004820152603c60248201527f4c69624469616d6f6e644375743a205f696e697420697320616464726573732860448201527f3029206275745f63616c6c64617461206973206e6f7420656d707479000000006064820152608401610106565b5050565b600081511161125a5760405162461bcd60e51b815260206004820152603d60248201527f4c69624469616d6f6e644375743a205f63616c6c6461746120697320656d707460448201527f7920627574205f696e6974206973206e6f7420616464726573732830290000006064820152608401610106565b6001600160a01b038216301461128c5761128c8260405180606001604052806028815260200161209f60289139611836565b600080836001600160a01b0316836040516112a7919061201f565b600060405180830381855af49150503d80600081146112e2576040519150601f19603f3d011682016040523d82523d6000602084013e6112e7565b606091505b50915091508161115657805115611312578060405162461bcd60e51b8152600401610106919061203b565b60405162461bcd60e51b815260206004820152602660248201527f4c69624469616d6f6e644375743a205f696e69742066756e6374696f6e2072656044820152651d995c9d195960d21b6064820152608401610106565b61138b816040518060600160405280602481526020016120c760249139611836565b6002820180546001600160a01b0390921660008181526001948501602090815260408220860185905594840183559182529290200180546001600160a01b0319169091179055565b6001600160e01b0319831660008181526020868152604080832080546001600160601b03909716600160a01b026001600160a01b0397881617815594909516808352600180890183529583208054968701815583528183206008870401805460e09890981c60046007909816979097026101000a96870263ffffffff9097021990971695909517909555529290915281546001600160a01b031916179055565b6001600160a01b0382166114ef5760405162461bcd60e51b815260206004820152603760248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f76652066756e6360448201527f74696f6e207468617420646f65736e27742065786973740000000000000000006064820152608401610106565b306001600160a01b0383160361155e5760405162461bcd60e51b815260206004820152602e60248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f766520696d6d7560448201526d3a30b1363290333ab731ba34b7b760911b6064820152608401610106565b6001600160e01b03198116600090815260208481526040808320546001600160a01b0386168452600180880190935290832054600160a01b9091046001600160601b031692916115ad91612055565b905080821461169f576001600160a01b038416600090815260018601602052604081208054839081106115e2576115e2611c56565b600091825260208083206008830401546001600160a01b038916845260018a019091526040909220805460079092166004026101000a90920460e01b92508291908590811061163357611633611c56565b600091825260208083206008830401805463ffffffff60079094166004026101000a938402191660e09590951c929092029390931790556001600160e01b03199290921682528690526040902080546001600160a01b0316600160a01b6001600160601b038516021790555b6001600160a01b038416600090815260018601602052604090208054806116c8576116c8612068565b60008281526020808220600860001990940193840401805463ffffffff600460078716026101000a0219169055919092556001600160e01b0319851682528690526040812081905581900361017357600285015460009061172b90600190612055565b6001600160a01b03861660009081526001808901602052604090912001549091508082146117da57600087600201838154811061176a5761176a611c56565b6000918252602090912001546002890180546001600160a01b03909216925082918490811061179b5761179b611c56565b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055929091168152600189810190925260409020018190555b866002018054806117ed576117ed612068565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b0388168252600189810190915260408220015550505050505050565b813b81816111565760405162461bcd60e51b8152600401610106919061203b565b508054600082556002029060005260206000209081019061187891906118da565b50565b50805461188790611cb1565b6000825580601f10611897575050565b601f016020900490600052602060002090810190611878919061190c565b508054600082556007016008900490600052602060002090810190611878919061190c565b808211156119085780546001600160a81b031916815560006118ff60018301826118b5565b506002016118da565b5090565b5b80821115611908576000815560010161190d565b80356001600160a01b038116811461193857600080fd5b919050565b60008083601f84011261194f57600080fd5b50813567ffffffffffffffff81111561196757600080fd5b60208301915083602082850101111561197f57600080fd5b9250929050565b60008060008060006060868803121561199e57600080fd5b853567ffffffffffffffff808211156119b657600080fd5b818801915088601f8301126119ca57600080fd5b8135818111156119d957600080fd5b8960208260051b85010111156119ee57600080fd5b60208301975080965050611a0460208901611921565b94506040880135915080821115611a1a57600080fd5b50611a278882890161193d565b969995985093965092949392505050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715611a7157611a71611a38565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611aa057611aa0611a38565b604052919050565b600067ffffffffffffffff821115611ac257611ac2611a38565b5060051b60200190565b6000611adf611ada84611aa8565b611a77565b83815260208082019190600586811b860136811115611afd57600080fd5b865b81811015611c0357803567ffffffffffffffff80821115611b205760008081fd5b818a01915060608236031215611b365760008081fd5b611b3e611a4e565b611b4783611921565b81528683013560038110611b5b5760008081fd5b8188015260408381013583811115611b735760008081fd5b939093019236601f850112611b8a57600092508283fd5b83359250611b9a611ada84611aa8565b83815292871b84018801928881019036851115611bb75760008081fd5b948901945b84861015611bec5785356001600160e01b031981168114611bdd5760008081fd5b82529489019490890190611bbc565b918301919091525088525050948301948301611aff565b5092979650505050505050565b60208082526026908201527f4c69624469616d6f6e643a204e6f20757067726164652070726f706f73616c2060408201526565786973747360d01b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611c9457611c94611c6c565b5060010190565b634e487b7160e01b600052602160045260246000fd5b600181811c90821680611cc557607f821691505b602082108103611ce557634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610d3157600081815260208120601f850160051c81016020861015611d125750805b601f850160051c820191505b81811015611d3157828155600101611d1e565b505050505050565b815167ffffffffffffffff811115611d5357611d53611a38565b611d6781611d618454611cb1565b84611ceb565b602080601f831160018114611d9c5760008415611d845750858301515b600019600386901b1c1916600185901b178555611d31565b600085815260208120601f198616915b82811015611dcb57888601518255948401946001909101908401611dac565b5085821015611de95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b80820180821115611e0c57611e0c611c6c565b92915050565b60005b83811015611e2d578181015183820152602001611e15565b50506000910152565b60008151808452611e4e816020860160208601611e12565b601f01601f19169290920160200192915050565b60006060808301818452808751808352608092508286019150828160051b8701016020808b0160005b84811015611f3257898403607f19018652815180516001600160a01b03168552838101518986019060038110611ed157634e487b7160e01b600052602160045260246000fd5b868601526040918201519186018a905281519081905290840190600090898701905b80831015611f1d5783516001600160e01b0319168252928601926001929092019190860190611ef3565b50978501979550505090820190600101611e8b565b50506001600160a01b038a16908801528681036040880152611f548189611e36565b9a9950505050505050505050565b6020808252602b908201527f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660408201526a1858d95d081d1bc818dd5d60aa1b606082015260800190565b6020808252602c908201527f4c69624469616d6f6e644375743a204164642066616365742063616e2774206260408201526b65206164647265737328302960a01b606082015260800190565b60006001600160601b0380831681810361201557612015611c6c565b6001019392505050565b60008251612031818460208701611e12565b9190910192915050565b60208152600061204e6020830184611e36565b9392505050565b81810381811115611e0c57611e0c611c6c565b634e487b7160e01b600052603160045260246000fdfec8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c4c69624469616d6f6e644375743a205f696e6974206164647265737320686173206e6f20636f64654c69624469616d6f6e644375743a204e657720666163657420686173206e6f20636f6465a264697066735822122092d865d88fec14bb225c1f31fd167b832c06056f0f4779a70e2a9569f0778f5d64736f6c63430008140033",
  "devdoc": {
    "details": "Implementation of the diamond cut functionality with a timelock mechanism.      The diamond cut operation allows adding, replacing, or removing facets and functions      from the diamond proxy contract. This implementation adds a security timelock      that requires a two-step process (propose and execute) for diamond cuts,      enhancing security by allowing time for review before execution.      Based on the EIP-2535 Diamond Standard.",
    "kind": "dev",
    "methods": {
      "cancelDiamondCut()": {
        "custom:security": "Only callable by the contract owner",
        "details": "Allows the contract owner to cancel a pending diamond cut proposal      before it is executed. This is useful if errors are found in the      proposed changes during the timelock period or if the changes      are no longer desired. Once cancelled, the proposal is completely      removed and a new proposal would need to be submitted if needed."
      },
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "custom:security": "Always reverts with an error message directing to the new functions",
        "details": "THIS FUNCTION IS DEPRECATED and will always revert when called.      It has been replaced by the more secure two-step process using      proposeDiamondCut() followed by executeDiamondCut(), which adds a timelock      security feature. This function remains to maintain compatibility with      the IDiamondCut interface but cannot be used."
      },
      "executeDiamondCut()": {
        "custom:security": "Reverts if no diamond cut is proposed, if the timelock period                  hasn't expired, or if the initialization call fails",
        "details": "Second and final step in the two-step diamond modification process.      This executes the changes that were previously proposed, but only if      the required timelock period has passed. The timelock period is a      security measure to allow stakeholders time to review proposed changes.      Only the contract owner can execute the diamond cut."
      },
      "proposeDiamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "details": "First step in the two-step process for modifying the diamond. This queues up      changes that can only be executed after a predefined timelock period.      Only the contract owner can propose changes.",
        "params": {
          "_calldata": "A function call, including function selector and arguments, for initialization",
          "_diamondCut": "Contains the facet addresses and function selectors to add, replace, or remove",
          "_init": "The address of the contract or facet to execute initialization code"
        }
      }
    },
    "title": "DiamondCutFacet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "cancelDiamondCut()": {
        "notice": "Cancel a previously proposed diamond cut"
      },
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "notice": "Add/replace/remove any number of functions and optionally execute initialization code"
      },
      "executeDiamondCut()": {
        "notice": "Execute a previously proposed diamond cut after the timelock period has elapsed"
      },
      "proposeDiamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "notice": "Propose a diamond cut to be executed after the timelock period"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}